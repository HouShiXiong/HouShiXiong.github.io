<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FPGA学习（五）</title>
      <link href="/2022/10/28/DDS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/10/28/DDS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="DDS初识"><a href="#DDS初识" class="headerlink" title="DDS初识"></a>DDS初识</h1><p>DDS（Direct Digital Synthesizer）直接数字式频率合成器，与传统的频率合成技术相比，DDS具有低成本，低功耗，高分辨率和快速转换时间等优点，广泛应用于电信与电子仪器领域，是实现设备全数字化的一个关键技术。</p><h2 id="DDS基本组成"><a href="#DDS基本组成" class="headerlink" title="DDS基本组成"></a>DDS基本组成</h2><p>其基本结构由<strong>相位累加器</strong>、<strong>相位调制器</strong>、<strong>波形数据表 ROM<em>、</em>D&#x2F;A 转换器</strong>组成。</p><p><img src="https://pic2.zhimg.com/v2-3580f38e97badc380f291e91afd9a3c0_1440w.jpg?source=172ae18b" alt="结构图"></p><h2 id="DDS优点"><a href="#DDS优点" class="headerlink" title="DDS优点"></a>DDS优点</h2><ul><li>频率分辨率高，输出频点多，可达2的N次方个频点（N为相位累加器位数）</li><li>频率切换速度块，DDS是一个开环系统，无任何反馈环节，因此频率转换时间极短，可达ns量级</li><li>频率切换时相位连续</li><li>输出相位噪声低，对参考频率源的相位噪声有改善作用</li><li>可以产生任意波形，全数字化实现，便于集成，体积小，重量轻</li></ul><h1 id="DDS如何在FPGA中实现"><a href="#DDS如何在FPGA中实现" class="headerlink" title="DDS如何在FPGA中实现"></a>DDS如何在FPGA中实现</h1><p>FPGA通过一定数量的引脚，将给定逻辑的高低电平输出，其电平的相加之和就可以成为一个<strong>假模拟</strong>信号（每个电平之间存在最小逻辑电平的差值，是不平滑的，因此需要通过高速D&#x2F;A转化器和低通滤波器后才能得到可用的模拟信号。）</p><p><img src="https://img-blog.csdnimg.cn/2ca6e848734d4f7880aebc74df3eeaf7.png" alt="数字化波形显示"></p><p>根据上面DDS的原理，FPGA需要做的其实只是将确定逻辑的高低电平以一定的频率进行输出即可。我们需要的只是一个<strong>存储这些高低信号的模块</strong>，以及<strong>确定读取他们的频率</strong>。</p><h2 id="如何存储电平信息"><a href="#如何存储电平信息" class="headerlink" title="如何存储电平信息"></a>如何存储电平信息</h2><p>POM示FPGA中常用的存储模块。ROM即read only memory，是只读的存储模块。FPGA中有一个名为ROM的IP核，调用它可以直接例化一个ROM模块。我们需要通过Matlab或者其他工具对我们期望输出的模拟信号进行数字化，生成一串数字数组（以mif为后缀），将他们放入ROM中即可。</p><p>关于比较简单ROM在此不展开，只需注意<strong>宽度</strong>，<strong>深度</strong>，<strong>地址宽度</strong>。</p><h2 id="如何读取电平信息"><a href="#如何读取电平信息" class="headerlink" title="如何读取电平信息"></a>如何读取电平信息</h2><p>在FPGA中读取ROM时，是输入一个<strong>地址</strong>，以及<strong>读取的时钟</strong>，他给我们的即是对应地址下面存储的数据，我们需要严格把控的是模拟信号输出的频率。</p><h1 id="Verilog实现"><a href="#Verilog实现" class="headerlink" title="Verilog实现"></a>Verilog实现</h1><p>DDS.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> DDS(</span><br><span class="line"></span><br><span class="line">    <span class="keyword">input</span> sys_clk,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] Fword,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">10</span>:<span class="number">0</span>] Pword,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">9</span>:<span class="number">0</span>] DA_data</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] r_Fword;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">10</span>:<span class="number">0</span>] r_Pword;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] Fcnt;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">10</span>:<span class="number">0</span>] adder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">    r_Fword &lt;= <span class="number">0</span>;</span><br><span class="line">    r_Pword &lt;= <span class="number">0</span>;     </span><br><span class="line">    <span class="keyword">end</span>     </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">    r_Fword &lt;= Fword;</span><br><span class="line">    r_Pword &lt;= Pword;     </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">        Fcnt &lt;= <span class="number">32&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        Fcnt &lt;= Fcnt + r_Fword;</span><br><span class="line"><span class="keyword">end</span>       </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">assign</span>   adder = Fcnt[<span class="number">31</span>:<span class="number">21</span>] + r_Pword;      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rom rom(</span><br><span class="line"><span class="variable">.address</span>  (adder)   ,</span><br><span class="line"><span class="variable">.clock</span>    (sys_clk) ,</span><br><span class="line"><span class="variable">.q</span>        (DA_data)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>Testbench</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_DDS();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> sys_clk       ;</span><br><span class="line"><span class="keyword">reg</span> rst_n         ;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] Fword  ;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">10</span>:<span class="number">0</span>] Pword  ;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">9</span>:<span class="number">0</span>] DA_data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    rst_n = <span class="number">0</span>;</span><br><span class="line">    Fword = <span class="number">1000</span>;</span><br><span class="line">    Pword = <span class="number">256</span>;</span><br><span class="line">    #<span class="number">210</span>;</span><br><span class="line">    rst_n &lt;= <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> sys_clk =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">always</span> #<span class="number">10</span> sys_clk=!sys_clk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DDS DDS_inst(</span><br><span class="line"></span><br><span class="line">    <span class="variable">.sys_clk</span>  (sys_clk)  ,</span><br><span class="line">    <span class="variable">.rst_n</span>    (rst_n)  ,</span><br><span class="line">    <span class="variable">.Fword</span>    (Fword)  ,</span><br><span class="line">    <span class="variable">.Pword</span>    (Pword)  ,</span><br><span class="line">    <span class="variable">.DA_data</span>  (DA_data)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过改变频率控制字的大小，可以改变相位累加器的累加速度，间接控制ROM读取速度，从而控制输出波形频率；</p><p>通过改变相位控制字的大小，可以改变相位调制器，间接控制ROM读取的初值，从而控制输出波形的初值；</p><h1 id="宇宙无敌坑"><a href="#宇宙无敌坑" class="headerlink" title="宇宙无敌坑"></a>宇宙无敌坑</h1><p><strong>modelsim仿真输出无波形，而地址循环增长，说明mif文件在调用ROM的路径存在问题，相对路径必须改为绝对路径。</strong><br>这东西搞了几天才找到解决方案，不愧是你，英特尔。</p>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暮秋有怀</title>
      <link href="/2022/10/26/%E4%B8%89%E5%8F%B7%E6%A5%BC%E5%B0%8F%E8%AF%97/"/>
      <url>/2022/10/26/%E4%B8%89%E5%8F%B7%E6%A5%BC%E5%B0%8F%E8%AF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="纪流光"><a href="#纪流光" class="headerlink" title="纪流光"></a>纪流光</h1><p>（三号楼）</p><p>迟日蕉山依寒流<br>半绾荼云掩昏宿<br>绞衣水瘦  落船舟<br>万里海天霞色似觉秋<br>银汉红墙昨羡首<br>晖落烟升今绸缪<br>暮重晚游  推馆旧<br>才感物是人非事事休</p><p>暮岁归山山色已旧<br>堂前梨树树已朽<br>群雪辞去长滩出河洲<br>枯葭难捱凛风洌霜厚<br>年少扬志志在八州<br>今朝旧物物难留<br>何处封尘意气万兜鍪<br>何杜与过往岁月厮守</p><p>鸦青瓦楞栖斑鸠<br>百草卷地烬入畴<br>因趁暮后温清粥<br>却剩孤野荒冢望星斗</p><p>空枝桃下下埋陈酒<br>推杯挽盏盏入喉<br>曾许春盘眠月相对酬<br>徒留只影空酌云间楼<br>谁人妄心把流光偷<br>换得天地更长久<br>只是归途未有故人候<br>寒山落曰骸形仍如旧</p><p>何说岁月能尽温柔<br>梦与天地皆被偷换走<br>长星千年未曾低眸<br>只照耀第十三座府州<br>但愿天下相共白头<br>不念流光何须再回首</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 温柔小诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>埋藏另一半自己</title>
      <link href="/2022/10/22/%E8%AF%BB%E3%80%8A%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E3%80%8B%E6%9C%89%E6%84%9F/"/>
      <url>/2022/10/22/%E8%AF%BB%E3%80%8A%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E3%80%8B%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>袁哲生被誉为“撑起21世纪台湾小说江山”的两位作家之一。他的小说严肃又悲悯，他用文字造了一个个清远的梦，梦里不仅有温柔凝视，也安放着死亡坟场。</p><p>袁哲生说过：小说就是告别世人前，一声如释重负的叹息，用一种深情的方式，跟这个世界说再见。</p><p>在B站播出的纪律片《但是，还有书籍》，除了标题吸引我，还有胡歌那种磁性而柔和的声音，感兴趣的朋友不要错过。在片中讲述了这本《寂寞的游戏》。后来在特别喜欢的播客 “文化有限” 那里再次听到了这本书，感觉与这本书有点缘分，就找来阅读了，在此记录一点自己的拙见，欢迎交流与指正。</p><h1 id="埋藏另一半自己"><a href="#埋藏另一半自己" class="headerlink" title="埋藏另一半自己"></a>埋藏另一半自己</h1><p>在第三章《寂寞的游戏》中，作者对于捉迷藏写道：</p><ul><li>或许这就是我为什么那么喜欢捉迷藏的原因：它一开始就引人入胜，并且充满期待。当扮鬼的同伴处心积虑地想找出我们，我们却在黑暗地角落里蜷缩着身体，紧绷着神经，盯着向我们寻来的同伴时，我总感觉自己深陷在一股漆黑的幸福之中无法自拔。</li></ul><p>我个人觉得，这个游戏只有刚开局时比较有趣，而后，很久没有人来找我我不会觉得自己是最后的赢家，而已一种被遗忘的孤独感。在模糊的记忆里有个这样的电影情节：男孩与一群伙伴玩捉迷藏，男孩躲在竹林里，一直“躲”到傍晚，然后一个人举头丧气的回到家。</p><p>果然，作者在再次谈到捉迷藏时的口吻：</p><ul><li>我就这样躲躲藏藏了许多年，直到有一天，捉迷藏的乐趣就像一颗流星，眨眼之间就消失的无影无踪。</li><li>他直愣愣的望着我，应该说是看穿了我，两眼盯着我的背后，一动也不动，令人不寒而栗。我从来没有看过那样一张完全没有表情的脸，和那么空洞的一双眼球，对我视而不见。</li></ul><p>可是后文作者依然在躲藏，他在躲藏自己对何雅文懵懂的爱慕之情</p><ul><li>我偷偷的瞄着身边的何雅文，她的脸颊被晚霞敷上薄彩，空气中忽然传来一种朴素的香气，像是刚刚削完铅笔的味道。我很想牵何雅文的手，像一只无知的猴子那样在马戏团的帐篷里绕场一周，可是我没有勇气，我把双手插进裤兜里去。</li></ul><p>在《遇见舒伯特》里，三位主人公是在和各自的梦想捉迷藏，书中特别有意思的一段：</p><ul><li>我穿着一身卡其制服，徘徊在宋老师家的巷口，左手的大盘帽遮不住右手指间的一截袅袅白烟。几次伸出手想按下电铃，又放了下来，最后，还是到“芳山杂货店”买了一包青箭口香糖，一口嚼上三片，自以为把满嘴的烟味盖掉了，才站在店门外的公共电话前面怯懦地投进一块钱……那一天下午的长谈，让宋老师走进我的历史，而我走进了历史系。</li></ul><p>作者在与自己尊敬的老师打电话时都想要掩盖身上的烟味，老师在他的心中是多么的伟岸啊，可是一向坚持我进研究院的老师在晚年也放弃了学术，而是成为了一名“乐队指挥”······</p><p>在《父亲的轮廓》中，父亲给自己敬礼之后，有种英雄使命交接的仪式感，这个家的英雄从此落在自己的肩上，而父亲已经打算落幕了。在读到父亲翻学校的围墙的片段时，父亲翻墙的动作像极了《背影》父亲给“我”买橘子的那一幕。唯一不同的是，与其说本文是父爱，我更感觉像两只浑身是伤的流浪猫在互相舔舐伤口。</p><ul><li>好好活下去，不一定要在意别人的话，人生有时候要走自己的路。</li></ul><p>人天生就喜欢躲藏，究竟是渴望消失还是期待被发现？如果有一个陌生人径直走向你，好像要和你说话，但是他最后越过你走向身后的其他人。在那一刻，你是会感到失落还是如释重负呢？那些自杀的人是想要杀死自己，还是杀死这个世界？</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 孤独 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA学习（四）</title>
      <link href="/2022/10/20/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/10/20/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="状态机的基本概念"><a href="#状态机的基本概念" class="headerlink" title="状态机的基本概念"></a>状态机的基本概念</h1><h2 id="状态机是什么"><a href="#状态机是什么" class="headerlink" title="状态机是什么"></a>状态机是什么</h2><p>FPGA不同于CPU的一个特点就是CPU是顺序执行的，而FPGA是同步执行（并行）的。那么FPGA如何处理明显具有时间上先后顺序的事件呢？这个时候我们就需要使用到状态机了。</p><p>状态机简写为 FSM（Finite State Machine），也称为同步有限状态机，我们一般简称为状态机，之所以说“同步”是因为<strong>状态机中所有的状态跳转都是在时钟的作用下进行的</strong>，而“有限”则是说状态的个数是有限的。状态机的每一个状态代表一个事件，从执行当前事件到执行另一事件我们称之为状态的跳转或状态的转移，我们需要做的就是执行该事件然后跳转到一下时间，这样我们的系统就“活”了，可以正常的运转起来了。状态机通过控制各个状态的跳转来控制 流程，使得整个代码看上去更加清晰易懂，在控制复杂流程的时候，状态机优势明显。</p><p>构成状态机的基本要素是状态机的<strong>输入</strong>，<strong>输出</strong>，<strong>状态</strong></p><h2 id="状态机分类"><a href="#状态机分类" class="headerlink" title="状态机分类"></a>状态机分类</h2><p>状态机根据输出是否与输入有关，将状态机分为<strong>Moore</strong>和<strong>Melay</strong>型</p><ul><li><p>Moore：输出只与当前状态有关</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/drIsJ2XFh6mt4t5D.png" alt="摩尔型状态机"></p></li><li><p>Melay：输出与当前状态和当前输入有关</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/09/4xc5VfpojsJMoZX5.png" alt="米利型状态机"></p></li></ul><h1 id="状态机设计流程及要点"><a href="#状态机设计流程及要点" class="headerlink" title="状态机设计流程及要点"></a>状态机设计流程及要点</h1><h2 id="起始状态的选择"><a href="#起始状态的选择" class="headerlink" title="起始状态的选择"></a>起始状态的选择</h2><p>起始状态是指电路复位后所处的状态，选择合理的起始状态将使整个系统简洁，高效。</p><h2 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h2><p>根据设计需求画出状态转移图，确定使用状态机类型，并标注出各种输入输出信号，更有助于编程。</p><h2 id="多余状态的处理"><a href="#多余状态的处理" class="headerlink" title="多余状态的处理"></a>多余状态的处理</h2><p>在状态机设计当中，通常会出现大量的多余状态，如采取n位状态编码，总的状态数位n的n次方，经常出现多余状态，或者无效状态吗，非法状态等。</p><ul><li>在case语句当中，用default分支决定一旦进入无效状态所采取的措施</li><li>编写必要的Verilog源代码明确定义无效状态采取的措施</li></ul><h2 id="常用编码方式"><a href="#常用编码方式" class="headerlink" title="常用编码方式"></a>常用编码方式</h2><ul><li>二进制编码：如00，01，10，11来表示state0, state1, state2, state3。其缺点非常明显：<strong>从一个状态转移到相邻个状态时，可能有多个比特位同时发生变化，瞬变次数多，容易产生毛刺，从而引发逻辑错误</strong></li><li>格雷编码：如00，01，11，10来表示state0, state1, state2, state3。格雷码节省逻辑单元，而且在状态顺序转换时，相邻状态每次只有一个比特位发生变化</li><li>Johnson编码：在Johnson计数器的基础上引出Johnson编码。Johnson计数器是一种移位计数器，采用的是把输出的最高位取反，反馈回最低位触发器的输入端。如000， 001， 011， 111， 110， 100来表示state0~state5</li><li>独热编码：独热码采用n个触发器来编码具有n个状态的状态机。如1000， 0100， 0010， 0001来表示state0~state3四个状态。<strong>采用独热码虽然多用了触发器，但可以有效节省和简化组合逻辑电路</strong>（独热码相当于已经译码过了，节省译码资源），对于FPGA来说，独热码可以有效提高电路的速度和可靠性，有利于提高器件资源的利用率。</li></ul><h1 id="状态机的写法"><a href="#状态机的写法" class="headerlink" title="状态机的写法"></a>状态机的写法</h1><p>（此处只对三段式状态机进行记录）</p><p><strong>一个always 模块采用同步时序描述状态转移，一个 always 采用组合逻辑判断状态转移条件，描述状态转移规律，另一个 always 模块描述状态输出</strong></p><p>可乐售卖系统：<em>可乐机每次只能投入 1 枚 1 元硬币，且每瓶可乐卖 3 元钱，即投入 3 个硬币就可以让可乐机出可乐，如果投币不够 3 元想放弃投币需要按复位键，否则之前投入的钱不能退回</em></p><p>Melay型状态机：</p><p>（深入学习推荐大神）<a href="%5B(20%E6%9D%A1%E6%B6%88%E6%81%AF">孤独的单刀</a> 孤独的单刀的博客_CSDN博客-【2】FPGA设计与调试,【3】7系列FPGA结构,SDRAM、DDR3领域博主](<a href="https://wuzhikai.blog.csdn.net/?type=blog">https://wuzhikai.blog.csdn.net/?type=blog</a>))</p><ul><li><strong>Mealy 状态机比Moore状态机的状态个数要少</strong></li><li><strong>Mealy 状态机比Moore状态机的输出要早一个时钟周期</strong></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> simple_fsm</span><br><span class="line">(   </span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span> money,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> cola</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span> IDLE = <span class="number">3&#x27;b001</span>;  <span class="comment">//独热码</span></span><br><span class="line"><span class="keyword">parameter</span> ONE  = <span class="number">3&#x27;b010</span>;</span><br><span class="line"><span class="keyword">parameter</span> TWO  = <span class="number">3&#x27;b100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] c_state;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] n_state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个进程，时序逻辑块描述状态转移...............非阻塞赋值</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)</span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        c_state &lt;= IDLE;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        c_state &lt;= n_state;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//第二个进程，组合逻辑块描述状态转移条件...............阻塞赋值   </span></span><br><span class="line"><span class="keyword">always</span>@(*)  </span><br><span class="line">    <span class="keyword">case</span>(c_state)</span><br><span class="line">        IDLE: <span class="keyword">if</span>(money == <span class="number">1&#x27;b1</span>)</span><br><span class="line">                   n_state = ONE;</span><br><span class="line">               <span class="keyword">else</span> </span><br><span class="line">                   n_state = IDLE;</span><br><span class="line">    </span><br><span class="line">        ONE:  <span class="keyword">if</span>(money == <span class="number">1&#x27;b1</span>)</span><br><span class="line">                   n_state = TWO;</span><br><span class="line">               <span class="keyword">else</span> </span><br><span class="line">                   n_state = ONE;</span><br><span class="line">                    </span><br><span class="line">        TWO:  <span class="keyword">if</span>(money == <span class="number">1&#x27;b1</span>)</span><br><span class="line">                   n_state = IDLE;</span><br><span class="line">               <span class="keyword">else</span> </span><br><span class="line">                   n_state = TWO;</span><br><span class="line">        <span class="keyword">default</span>: n_state = IDLE;      <span class="comment">//防止产生锁存器Latch</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三个进程，时序逻辑描述次态输出（节约一个时钟周期...............非阻塞赋值</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)</span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        cola &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(n_state)</span><br><span class="line">        </span><br><span class="line">        IDLE:  <span class="keyword">if</span>(money == <span class="number">1&#x27;b1</span>)</span><br><span class="line">                  cola &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">               <span class="keyword">else</span> </span><br><span class="line">                   cola &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">        ONE :   cola &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                    </span><br><span class="line">        TWO :   cola &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:cola &lt;= <span class="number">1&#x27;b0</span>;      <span class="comment">//防止产生锁存器Latch</span></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="TestBench"><a href="#TestBench" class="headerlink" title="TestBench"></a>TestBench</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_simple_fsm();</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">reg</span> reset;</span><br><span class="line"><span class="keyword">reg</span> money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> cola;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        clk = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        reset = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        #<span class="number">20</span></span><br><span class="line">        reset = <span class="number">1&#x27;b1</span>;   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>#<span class="number">10</span>  clk = !clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)</span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        money &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        money &lt;= &#123;<span class="built_in">$random</span>&#125;%<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] n_state=simple_fsm_inst<span class="variable">.n_state</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">initial</span> </span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="built_in">$timeformat</span>(-<span class="number">9</span>,<span class="number">0</span>,<span class="string">&quot;ns&quot;</span>,<span class="number">6</span>);</span><br><span class="line">        <span class="built_in">$monitor</span>(<span class="string">&quot;@time %t:money =%b,n_state =%b,cola =%b&quot;</span>,<span class="built_in">$time</span>,money,n_state,cola);       </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simple_fsm  simple_fsm_inst</span><br><span class="line">(   </span><br><span class="line">   <span class="variable">.clk</span>  (clk),</span><br><span class="line">   <span class="variable">.reset</span>(reset),</span><br><span class="line">   <span class="variable">.money</span>(money),</span><br><span class="line"></span><br><span class="line">   <span class="variable">.cola</span> (cola)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA学习（三）</title>
      <link href="/2022/10/19/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/10/19/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="UART的组成"><a href="#UART的组成" class="headerlink" title="UART的组成"></a>UART的组成</h1><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>UART通信只有两个信号线，发送数据端口<strong>TX（Transmiitter）</strong>和<strong>RX（Recceiver）</strong>。UART为异步全双工通信模式。</p><p>电信号的传输过程有不同的电平标准和接口规范，对于UART，有RS232（单端输入输出0），RS422（差分输入输出），RS485（差分输入输出）等。</p><h2 id="UART协议"><a href="#UART协议" class="headerlink" title="UART协议"></a>UART协议</h2><p>UART在发送或者接收过程中的一帧数据由4部分组成，<strong>起始位</strong>，<strong>数据位</strong>，<strong>奇偶校验位</strong>，<strong>停止位</strong>。起始位标志一帧数据的开始，停止位标志着一帧数据的结束，数据位是一帧数据当中的有效数据。</p><p><img src="https://img2018.cnblogs.com/blog/1536533/201906/1536533-20190625200640254-291061455.png" alt="数据帧格式"></p><p>波特率：每秒传输的数据的比特数，单位是 （ 位 &#x2F; 秒）bps，常用的有9600，19200，38400，57600，115200 等</p><h1 id="串口发送"><a href="#串口发送" class="headerlink" title="串口发送"></a>串口发送</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> UART_tx</span><br><span class="line">#(</span><br><span class="line"><span class="keyword">parameter</span><span class="keyword">integer</span>BPS= <span class="number">9_600</span>,<span class="comment">//发送波特率</span></span><br><span class="line"><span class="keyword">parameter</span> <span class="keyword">integer</span>CLK_FRE= <span class="number">50_000_000</span><span class="comment">//主时钟频率</span></span><br><span class="line">)</span><br><span class="line">(    </span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,   </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] tx_data,</span><br><span class="line">    <span class="keyword">input</span> start,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> tx,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> tx_done</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">localparam</span><span class="keyword">integer</span>BPS_CNT  = CLK_FRE / BPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] r_data;</span><br><span class="line"><span class="keyword">reg</span> state;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">17</span>:<span class="number">0</span>] clk_cnt;</span><br><span class="line"><span class="keyword">reg</span> bit_flag;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] bit_cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============将并行数据寄存==================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        r_data &lt;= <span class="number">8&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(start)</span><br><span class="line">        r_data &lt;= tx_data;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r_data &lt;= r_data;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============state信号==================//  </span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        state &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(start)</span><br><span class="line">        state &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tx_done)</span><br><span class="line">        state &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        state &lt;= state;  </span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">//=============时钟计数==================//   </span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        clk_cnt &lt;= <span class="number">18&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(state)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(clk_cnt == BPS_CNT -<span class="number">1</span>)</span><br><span class="line">            clk_cnt &lt;= <span class="number">18&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            clk_cnt &lt;= clk_cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        clk_cnt &lt;= <span class="number">18&#x27;d0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============标志位==================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        bit_flag &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(clk_cnt == <span class="number">1</span>)</span><br><span class="line">        bit_flag &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        bit_flag &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============传输第几位==================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span>          </span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bit_flag)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(bit_cnt == <span class="number">10</span>)</span><br><span class="line">            bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            bit_cnt &lt;= bit_cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        bit_cnt &lt;= bit_cnt;</span><br><span class="line"><span class="keyword">end</span>        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============按位数赋值==================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        tx &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(state)</span><br><span class="line">        <span class="keyword">case</span>(bit_cnt)</span><br><span class="line">            <span class="number">4&#x27;d1</span>: tx &lt;= <span class="number">1&#x27;b0</span>;   </span><br><span class="line">            <span class="number">4&#x27;d2</span>: tx &lt;= r_data[<span class="number">0</span>];</span><br><span class="line">            <span class="number">4&#x27;d3</span>: tx &lt;= r_data[<span class="number">1</span>];</span><br><span class="line">            <span class="number">4&#x27;d4</span>: tx &lt;= r_data[<span class="number">2</span>];</span><br><span class="line">            <span class="number">4&#x27;d5</span>: tx &lt;= r_data[<span class="number">3</span>];</span><br><span class="line">            <span class="number">4&#x27;d6</span>: tx &lt;= r_data[<span class="number">4</span>];</span><br><span class="line">            <span class="number">4&#x27;d7</span>: tx &lt;= r_data[<span class="number">5</span>];</span><br><span class="line">            <span class="number">4&#x27;d8</span>: tx &lt;= r_data[<span class="number">6</span>];</span><br><span class="line">            <span class="number">4&#x27;d9</span>: tx &lt;= r_data[<span class="number">7</span>];   </span><br><span class="line">            <span class="number">4&#x27;d10</span>:tx &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">default</span>: tx &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tx &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//=============传输完成信号==================// </span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        tx_done &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((bit_cnt == <span class="number">10</span>)&amp;&amp;(clk_cnt == BPS_CNT-<span class="number">1</span>))</span><br><span class="line">        tx_done &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tx_done &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>值得注意的是：bit_cnt计数时，0是非传输状态，1为起始位，2—9为数据位，10为停止位</p><h2 id="串口发送-TestBench"><a href="#串口发送-TestBench" class="headerlink" title="串口发送 TestBench"></a>串口发送 TestBench</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns</span><span class="comment">//定义时间刻度</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">module</span> tb_UART_tx();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">reg</span> reset;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>]tx_data;</span><br><span class="line"><span class="keyword">reg</span>             start   ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>            tx      ; </span><br><span class="line"><span class="keyword">wire</span>            done    ;      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span><span class="keyword">integer</span>BPS = <span class="number">&#x27;d9600</span>;<span class="comment">//波特率</span></span><br><span class="line"><span class="keyword">parameter</span><span class="keyword">integer</span>CLK_FRE = <span class="number">&#x27;d50_000_000</span>;<span class="comment">//系统频率50M</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//localparamintegerBIT_TIME = &#x27;d1000_000_000 / BPS ;//计算出传输每个bit所需要的时间</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">clk = <span class="number">1&#x27;b0</span>;</span><br><span class="line">reset = <span class="number">1&#x27;b0</span>;</span><br><span class="line">tx_data = <span class="number">8&#x27;d0</span>;</span><br><span class="line">#<span class="number">80</span> ;<span class="comment">//系统开始工作</span></span><br><span class="line">reset =<span class="number">1&#x27;b1</span>;</span><br><span class="line">    #<span class="number">200</span>;</span><br><span class="line">    </span><br><span class="line">    tx_data = <span class="number">&#x27;h55</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">20</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">2000000</span>;</span><br><span class="line">    </span><br><span class="line">    tx_data = <span class="number">&#x27;h66</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">20</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">2000000</span>;</span><br><span class="line">    </span><br><span class="line">    tx_data = <span class="number">&#x27;h77</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">20</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">2000000</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">always</span> #<span class="number">10</span> clk=~clk;<span class="comment">//定义主时钟，周期20ns，频率50M</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//例化发送驱动模块</span></span><br><span class="line">UART_tx #(</span><br><span class="line"><span class="variable">.BPS</span>(BPS),</span><br><span class="line"><span class="variable">.CLK_FRE</span>(CLK_FRE)</span><br><span class="line">)</span><br><span class="line">UART_tx_inst(</span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.reset</span>(reset),</span><br><span class="line"><span class="variable">.tx_data</span>(tx_data),</span><br><span class="line"><span class="variable">.start</span>(start),</span><br><span class="line"></span><br><span class="line"><span class="variable">.tx</span>      (tx  ),</span><br><span class="line"><span class="variable">.done</span>    (done    )</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><h1 id="串口接收"><a href="#串口接收" class="headerlink" title="串口接收"></a>串口接收</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> UART_rx</span><br><span class="line">#(</span><br><span class="line"><span class="keyword">parameter</span><span class="keyword">integer</span>BPS= <span class="number">9_600</span>,<span class="comment">//发送波特率</span></span><br><span class="line"><span class="keyword">parameter</span> <span class="keyword">integer</span>CLK_FRE= <span class="number">50_000_000</span><span class="comment">//主时钟频率</span></span><br><span class="line">)</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span> rx,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] rx_data,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> rx_done</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">localparam</span><span class="keyword">integer</span>BPS_CNT  = CLK_FRE / BPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> rx0;</span><br><span class="line"><span class="keyword">reg</span> rx1;</span><br><span class="line"><span class="keyword">reg</span> rx2;</span><br><span class="line"><span class="keyword">reg</span> start;</span><br><span class="line"><span class="keyword">reg</span> state;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">17</span>:<span class="number">0</span>] clk_cnt;</span><br><span class="line"><span class="keyword">reg</span> bit_flag;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] bit_cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========同步时钟,消除亚稳态===============//</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset) <span class="keyword">begin</span></span><br><span class="line">        rx0 &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        rx1 &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        rx2 &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        rx0 &lt;= rx;</span><br><span class="line">        rx1 &lt;= rx0;</span><br><span class="line">        rx2 &lt;= rx1;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//============捕获下降沿=======================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)</span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        start &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((~rx1) &amp;&amp; (rx2)&amp;&amp;(!state))</span><br><span class="line">        start &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        start &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========工作状态state信号=============//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        state &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(start)</span><br><span class="line">        state &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rx_done)</span><br><span class="line">        state &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        state &lt;= state;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============时钟计数==================//   </span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        clk_cnt &lt;= <span class="number">18&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(state)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(clk_cnt == BPS_CNT -<span class="number">1</span>)</span><br><span class="line">            clk_cnt &lt;= <span class="number">18&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            clk_cnt &lt;= clk_cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        clk_cnt &lt;= <span class="number">18&#x27;d0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============标志位==================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        bit_flag &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(clk_cnt == BPS_CNT - <span class="number">1</span>)</span><br><span class="line">        bit_flag &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        bit_flag &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============传输第几位==================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span>          </span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bit_flag)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(bit_cnt == <span class="number">10</span>)</span><br><span class="line">            bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            bit_cnt &lt;= bit_cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        bit_cnt &lt;= bit_cnt;</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//==============data移位赋值======================//</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)</span><br><span class="line">    <span class="keyword">if</span>(reset == <span class="number">1&#x27;b0</span>)</span><br><span class="line">        rx_data &lt;= <span class="number">8&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">if</span>((bit_cnt &gt;= <span class="number">4&#x27;d0</span>)&amp;&amp;(bit_cnt &lt;= <span class="number">4&#x27;d7</span>)&amp;&amp;(bit_flag == <span class="number">1&#x27;b1</span>))</span><br><span class="line">        rx_data &lt;= &#123;rx2,rx_data[<span class="number">7</span>:<span class="number">1</span>]&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============传输完成信号==================// </span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!reset)</span><br><span class="line">        rx_done &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((bit_cnt == <span class="number">10</span>)&amp;&amp;(clk_cnt == BPS_CNT-<span class="number">1</span>))</span><br><span class="line">        rx_done &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        rx_done &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h1 id="顶层模块"><a href="#顶层模块" class="headerlink" title="顶层模块"></a>顶层模块</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> uart</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,   </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] tx_data,</span><br><span class="line">    <span class="keyword">input</span> start,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">output</span>  [<span class="number">7</span>:<span class="number">0</span>] rx_data,</span><br><span class="line">    <span class="keyword">output</span> done </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span><span class="keyword">integer</span>BPS = <span class="number">&#x27;d9600</span>;<span class="comment">//波特率</span></span><br><span class="line"><span class="keyword">parameter</span><span class="keyword">integer</span>CLK_FRE = <span class="number">&#x27;d50_000_000</span>;<span class="comment">//系统频率50M</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> tx1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例化发送驱动模块</span></span><br><span class="line">UART_tx #(</span><br><span class="line"><span class="variable">.BPS</span>(BPS),</span><br><span class="line"><span class="variable">.CLK_FRE</span>(CLK_FRE)</span><br><span class="line">)</span><br><span class="line">UART_tx_inst(</span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.reset</span>(reset),</span><br><span class="line"><span class="variable">.tx_data</span>(tx_data    ),</span><br><span class="line"><span class="variable">.start</span>(start),</span><br><span class="line"></span><br><span class="line"><span class="variable">.tx</span>      (tx1 ),</span><br><span class="line"><span class="variable">.tx_done</span>(       )</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//例化被测试的串口接收_rx</span></span><br><span class="line">UART_rx</span><br><span class="line">#(</span><br><span class="line"><span class="variable">.BPS</span>(BPS),</span><br><span class="line"><span class="variable">.CLK_FRE</span>(CLK_FRE)</span><br><span class="line">)</span><br><span class="line">UART_rx_inst(</span><br><span class="line"><span class="variable">.clk</span>(clk ),</span><br><span class="line"><span class="variable">.reset</span>(reset   ),</span><br><span class="line"><span class="variable">.rx</span>    (tx1 ),</span><br><span class="line">    </span><br><span class="line">    <span class="variable">.rx_data</span>(rx_data ),</span><br><span class="line"><span class="variable">.rx_done</span>(done     )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h1 id="回传TestBench"><a href="#回传TestBench" class="headerlink" title="回传TestBench"></a>回传TestBench</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> tb_uart();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">reg</span> clk;</span><br><span class="line"> <span class="keyword">reg</span> reset;   </span><br><span class="line"> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] tx_data;</span><br><span class="line"> <span class="keyword">reg</span> start;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] rx_data;</span><br><span class="line"> <span class="keyword">wire</span>  done;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">clk = <span class="number">1&#x27;b0</span>;</span><br><span class="line">reset = <span class="number">1&#x27;b0</span>;</span><br><span class="line">tx_data = <span class="number">8&#x27;d0</span>;</span><br><span class="line">#<span class="number">80</span> ;<span class="comment">//系统开始工作</span></span><br><span class="line">reset =<span class="number">1&#x27;b1</span>;</span><br><span class="line">    #<span class="number">200</span>;</span><br><span class="line">    </span><br><span class="line">    tx_data = <span class="number">&#x27;h55</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">20</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">2000000</span>;</span><br><span class="line">    </span><br><span class="line">    tx_data = <span class="number">&#x27;h66</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">20</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">2000000</span>;</span><br><span class="line">    </span><br><span class="line">    tx_data = <span class="number">&#x27;h77</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b1</span>;</span><br><span class="line">#<span class="number">20</span>;</span><br><span class="line">    start = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    #<span class="number">2000000</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> #<span class="number">10</span> clk=~clk;</span><br><span class="line"></span><br><span class="line">uart  uart_inst(</span><br><span class="line"></span><br><span class="line">    <span class="variable">.clk</span>      (clk) ,</span><br><span class="line">    <span class="variable">.reset</span>    (reset) ,  </span><br><span class="line">    <span class="variable">.tx_data</span>  (tx_data) ,</span><br><span class="line">    <span class="variable">.start</span>    (start) ,</span><br><span class="line"> </span><br><span class="line">    <span class="variable">.rx_data</span>  (rx_data),</span><br><span class="line">    <span class="variable">.done</span>     (done   )</span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h1 id="感悟和反思"><a href="#感悟和反思" class="headerlink" title="感悟和反思"></a>感悟和反思</h1><p>以前用 51，32，430之类的单片机时，完全囫囵吞枣，浏览一下基础，对串口有个基础认识就开始调用函数。直到用 Veriloog 书写时才发现自己的不足。一个以前没重视过的串口卡了我几乎一周，到处收集资料和别人的程序，各种不同的设计思路也多少尝试过，也只是描头画角，还遇见一个报错动辄查半个小时以上解决方案的。各种碰壁后，还是决定从头开始，最终也是摸爬滚打的啃了下来。</p><p>这次的学习过程算是让我体会到了，学习是特别需要坚持和脚踏实地的。下面记录我的程序中略微困难的地方</p><ul><li>移位赋值为什么从0~7（根据波形图更改所得）</li><li>为什么要计数0~10（0舍弃，起始位+数据位+停止位&#x3D;10）</li></ul><p>我还有些许问题未能理解，希望各位大佬能指点一二，不胜感激</p><ul><li>我的程序中取值时刻在时钟计数&#x3D;1，若为求数据稳定而设置在最大值 &#x2F;2 - 1时刻，我的结束标志该如何设置，否则位计数一直处于10</li></ul>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA学习（二）</title>
      <link href="/2022/10/13/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/10/13/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Verilog-HDL基础知识"><a href="#Verilog-HDL基础知识" class="headerlink" title="Verilog HDL基础知识"></a>Verilog HDL基础知识</h1><h2 id="Verilog-HDL-的语言要素"><a href="#Verilog-HDL-的语言要素" class="headerlink" title="Verilog HDL 的语言要素"></a>Verilog HDL 的语言要素</h2><ol><li><p><em>注释符</em></p><ul><li>单行注释：以 “ &#x2F;&#x2F; “ 开头，Verilog HDL 忽略从此处到行尾的内容</li><li>多行注释：以 “ &#x2F;* “ 开始，到 “  *&#x2F; “ 结束，Verilog HDL 忽略其中的内容</li></ul></li><li><p><em>标识符和转义标识符</em> </p><ul><li>标识符(Identifier)被用来命名信号，模块，参数等，它可以是任意的一组<strong>字母</strong>，<strong>数字</strong>，<strong>￥符号</strong>，<strong>下划线</strong>的组合。</li><li>注意：标识符的字母区分大小写，<strong>并且第一个字符必须是字母或者下划线</strong></li></ul></li><li><p><em>关键字</em></p><ul><li>Verilog HDL 内部已经使用的词叫做关键字或保留字，它是Verilog HDL 内部的专用词，是事先定义好的确认符号，用来组织语言结构，用户不能随意使用。</li><li>注意：所有的关键字都是小写</li></ul></li><li><p><em>数值</em></p><ul><li><p>形式为：+&#x2F;- &lt;位宽&gt; ‘ &lt;进制&gt;&lt;数字&gt;</p></li><li><table><thead><tr><th align="center">数制</th><th align="center">基数符号</th><th align="center">字符集</th></tr></thead><tbody><tr><td align="center">二进制（Binary）</td><td align="center">b&#x2F;B</td><td align="center">0,1,x,X,z,Z,?</td></tr><tr><td align="center">八进制（Octal）</td><td align="center">o&#x2F;O</td><td align="center">0~7，x,X,z,Z,?</td></tr><tr><td align="center">十进制（Decimal）</td><td align="center">d&#x2F;D</td><td align="center">0~9</td></tr><tr><td align="center">十六进制（Hexadecimal）</td><td align="center">h&#x2F;H</td><td align="center">0<del>9,a</del>f,A~F,x,X,z,Z,?</td></tr></tbody></table><p>注意：未定义位宽时，默认32位</p></li></ul></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Verilog HDL 主要包含两种数据类型，<strong>net</strong>和<strong>variable</strong>型。（在Verilog_1995标准中，variable型变量被成为register型；在Verilog_2001标准中，register一词被改为variable，以避免初学者将register和硬件中的寄存器混淆起来）</p><ul><li><p><strong>wire</strong>是最常用的net型数据变量，Verilog模块中的输入&#x2F;输出信号在没有明确指定的时候都默认为wire。wire型信号可以做任何表达式的输入，也可作为assign语句和实例元件的输出</p></li><li><p><strong>reg</strong>是最常用的variable型数据变量，reg型变量并不意味着一定对应硬件上的寄存器或触发器，在综合时，综合器根据具体情况确定将其映射为寄存器还是连线</p><blockquote><p>reg [7:0] sum;    &#x2F;&#x2F;定义八位宽的reg型变量</p><p>wire [3:0] cout;  &#x2F;&#x2F;定义四位宽的wire型变量</p></blockquote><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2></li></ul><p>在Verilog HDL 中，用参数<strong>parameter</strong>来定义符号常量，即用 parameter 定义一个参数名来代表一个常量。参数常用来定义时延和变量的宽度。使用参数说明的常量只能被赋值一次。</p><blockquote><p>参数声明如下，参数名通常用大写</p><blockquote><p>parameter   参数名 &#x3D; 表达式 ；</p><p>parameter SEL &#x3D; 8 , CODE &#x3D; 8’ha3 ;</p><p>parameter DATAWIDTH &#x3D; 8 , ADDERWIDTH &#x3D; DATAWIDTH * 2 ;</p></blockquote></blockquote><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol><li><p>算术运算符_Arithmetic Operator（<em>双目</em>）</p><blockquote><p>  +        加</p><p>  -        减</p><p>  *        乘</p><p>  &#x2F;         除</p><p>%       求模&#x2F;余</p></blockquote></li><li><p>逻辑运算符_Logical Operator</p><blockquote><p>&amp;&amp;        逻辑与</p><p> ||          逻辑或</p><p> ！        逻辑非</p></blockquote></li><li><p>位运算符_Bitwise Operator</p><blockquote><p>~          按位取反</p><p>&amp;         按位与</p><p>|           按位或</p><p>^          按位异或</p><p>^<del>(</del>^)  按位同或           </p><p><em>注意：两个不同长度的数据位运算时，自动将两个操作数按右端对齐，位数少的高位用0补齐</em>   </p></blockquote></li><li><p>关系运算符_Relational Operator</p><blockquote><p>&lt;          小于</p><p>&lt;&#x3D;        小于等于</p><p>&gt;           大于</p><p>&gt;&#x3D;         大于等于</p><p>在关系运算时，若声明的关系为假，则返回值是0；若声明的关系为真，则返回的值是1；若某个操作数的值不定，则关系的结果是模糊的，返回值是不定值</p></blockquote></li><li><p>缩减运算符_Reduction Operator</p><blockquote><p>&amp;         与</p><p>~&amp;       与非</p><p>|           或</p><p>~ |        或非</p><p>^          异或</p><p>~^        同或</p></blockquote></li><li><p>移位运算符_Shift Operator</p><blockquote><p>&gt;&gt;       右移</p><p>&lt;&lt;        左移</p><p>&gt;&gt;&gt;      算术右移</p><p>&lt;&lt;&lt;       算术左移</p></blockquote></li><li><p>条件运算符_Conditional Operator</p><blockquote><p>? :       (定义与C语言相同)</p><blockquote><p>out &#x3D; sel ? in1 : in2 ;     二选一数据选择器</p></blockquote></blockquote></li><li><p>位拼接运算符_Concatenation Operator</p><blockquote><p>{  }          将两个或多个信号的某些位拼接起来</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] ina,inb;</span><br><span class="line"><span class="keyword">input</span> cin;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>]  sum;</span><br><span class="line"><span class="keyword">output</span> cout;</span><br><span class="line"><span class="keyword">assign</span> &#123;cout,sum&#125; = ina+inb+cin;</span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">3</span>&#123;a,b&#125;&#125;         <span class="comment">//复制三次，等价于 &#123;&#123;a,b&#125;,&#123;a,b&#125;,&#123;a,b&#125;&#125;</span></span><br></pre></td></tr></table></figure></blockquote></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯真的童年</title>
      <link href="/2022/10/11/%E8%AF%BB%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E6%9C%89%E6%84%9F/"/>
      <url>/2022/10/11/%E8%AF%BB%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="纯真的童年"><a href="#纯真的童年" class="headerlink" title="纯真的童年"></a>纯真的童年</h1><p>第一次读林海音老师的文字是在小学还是初中似乎已经模糊。说来忏愧，中小学的读物，竟到大学才翻出来品味，属于是当代大学生的累赘了。</p><p>小时候的英子原本与普通孩子没什么区别，只是在秀贞与妞儿离去后；在兰姨和德叔离去后；在宋妈离去后；在草丛中那个陌生人的离去后；在爸爸与自己天人永隔后，长大后的她更成熟了。</p><p>在那样一个吃人的旧社会里，虽然懵懂经历苦难的她，却依然保持一颗纯真的心。她的那句：“人太多了，我分不清海跟天，也分不清好人与坏人。” 更让我知道正是因为英子有这样的一颗心，她的童年才那么快乐又单纯，把我带进了另一个童趣的世界。那样的世界仿佛看不到旧社会的黑暗，仅仅只是一个孩子快乐、纯真的生活。</p><p>历经人间悲欢离合的英子，懂得了朋友离世的难过，懂得了失去亲人的哀伤，懂得了因为自己的不小心导致草丛里的那人，学校优秀毕业代表的哥哥的不幸后的歉疚之情……</p><p>读着读着，我仿佛身临其境：看到了东阳下戴着铃铛的骆驼队，一边走一边悠闲的嚼着草；看见了向英子招手的疯女人秀贞，她的嘴角挂着温和的笑；看见了一起玩荡秋千的妞儿，她们两个小孩开心的笑着。这些人都和英子建立了浓厚的感情，在她童年的每一刻都是重要的、快乐的、美好的并且刻骨铭心。</p><p>相比英子有趣、精彩且有些哀伤的童年生活，我们的生活则显得更单纯和无忧无虑。从小在农村长大的我不能真切的体会到北京胡同里的那份淳朴，不过英子单纯的模样却与我童年的模样有几分相似。她的故事非常淳朴、真实，更勾起我们对正在溜走的童年的依依不舍。</p><p>岁月蹉跎，儿时的玩伴已经在我的记忆里逐渐模糊，手机并不普及的年代，我们唯一的联系只有同学录上那些虚假的QQ号码和那些祝福的话。如果再次相见，我不知道自己会说出什么话语，似乎只有简单的问候：“好久不见！” “最近看了什么书？” “最近听了什么歌？” “最近过的好吗？”。</p><p>​让实际的童年过去，让心灵的童年永存下来，《城南旧事》像是初秋的一缕微风，让我回忆起童年的点点滴滴，或酸或甜，都是独一无二的味道。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 童年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA学习（一）</title>
      <link href="/2022/10/11/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/10/11/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="初识FPGA"><a href="#初识FPGA" class="headerlink" title="初识FPGA"></a>初识FPGA</h1><h2 id="关于FPGA的一些基本概念"><a href="#关于FPGA的一些基本概念" class="headerlink" title="关于FPGA的一些基本概念"></a>关于FPGA的一些基本概念</h2><ol><li><p>FPGA是什么</p><p>FPGA取自Field Programmable Gate Array 这四个英文单词的首字母，译为“现场（Field）可编程（Programmable）逻辑阵列（Gate Array）”</p><p>相对于功能较为固定的ASIC（专用集成电路）和ASSP（专用标准产品），FPGA相对自由，使用了FPGA器件的电子产品，在产品发布后仍然可以对产品设计做出修改，大大方便了产品的更新以及新的协议标准做出相应改进，从而加速产品的上市时间，并降低产品失败风险和维护成本。</p><p>举个浅显的比喻，如果说ASIC或ASSP是布满文字的印刷品，FPGA就是用铅笔自由发挥的白纸。</p></li><li><p>FPGA的内部结构：</p><ul><li>可编程输入输出单元（IOB）</li><li>可编程逻辑单元（CLB）</li><li>布线资源</li><li>嵌入式块RAM</li><li>底层嵌入功能单元（Sofa Core，区别与软IP核）</li><li>内嵌专用硬核（Hard Core，区别与硬IP核心）市场竞争</li></ul></li><li><p>市场竞争</p><p>全球 FPGA 市场由四大巨头 Xilinx（2022年被AMD收购），Altera（2015年被Intel收购），Lattice，Microsemi 垄断，同时在硬件设计和高端的EDA 软件设计上都形成了极强的技术封锁。国外企业起步较早，Xilinx、 Altera、Lattice 等公司通过近 9000 项专利构筑了牢固的知识产权壁垒，并形成了非常强大的产业生态链，四大厂商的市场占有率达到了 96%。</p></li></ol><h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><p>FPGA目前虽然还受制于较高的开发门槛以及器件本身昂贵的价格，应用的普及率上不如ARM和DSP，但是在很多的应用场合，还是必须要使用它。</p><ul><li><strong>通信领域</strong>，FPGA在通信领域的应用可以说是无所不能，得益于FPGA内部结构的特点，它可以很容易地实现分布式的算法结构，这一点对于实现无线通信中的高速数字信号处理十分有利。因为在无线通信系统中，许多功能模块通常都需要大量的滤波运算，而这些滤波函数往往需要大量的乘和累加操作，而通过FPGA来实现分布式的算术结构，就可以有效地实现这些乘和累加操作。</li><li><strong>数字信号处理</strong>,在数字信号处理领域FPGA同样所向披靡，主要是因为它的高速并行处理能力。FPGA最大优势是其并行处理机制，即利用并行架构实现数字信号处理的功能。这一并行机制使得FPGA特别适合于完成FIR等数字滤波这样重复性的数字信号处理任务，对于高速并行的数字信号处理任务来说，FPGA性能远远超过通用DSP处理器的串行执行架构，还有就是它接口的电压和驱动能力都是可编程配置的不像传统的DSP要受指令集控制。</li><li><strong>视频图像处理</strong>，人们对图像的稳定性、清晰度、亮度和颜色的追求越来越高，这使得处理芯片需要实时处理的数据量越来越大，并且图像的压缩算法也是越来越复杂。这时FPGA的优势就凸显出来了，它可以更加高效的处理数据，所以在图像处理领域在综合考虑成本后，FPGA也越来越受到市场的欢迎。</li><li><strong>高速接口</strong>，传统的做法是对应的接口使用对应的接口芯片，例如PCI接口芯片，当我需要很多接口时我就需要多个这样的接口芯片，这无疑会使我们的硬件外设变得复杂，体积变得庞大，会很不方便，但是如果使用FPGA优势立马就出来了。因为不同的接口逻辑都可以在FPGA内部去实现，完全没必要那么多的接口芯片，在配合DDR存储器的使用，将使我们接口数据的处理变得更加得心应手。</li><li><strong>人工智能</strong>，本人身微言轻，请移步<a href="%5B%E3%80%90%E8%8A%AF%E7%89%87%E5%89%8D%E6%B2%BF%E3%80%91%E8%8B%B1%E7%89%B9%E5%B0%94%E7%9A%84%E8%BF%99%E4%B8%AAAI%E8%8A%AF%E7%89%87%EF%BC%8C%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95%E8%B6%85%E8%BF%87%E8%8B%B1%E4%BC%9F%E8%BE%BE20%E5%80%8D%EF%BC%9F_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV11U4y1x7hH/?spm_id_from=333.788&vd_source=a1478b3e6a29e404615d9d5f7cb4fa30)" title="老石谈芯">中科院博士</a>对其具体的讲解和分析。</li><li><strong>IC设计</strong>，我不会，不敢乱说，自行百度。</li></ul><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="硬件描述语言"><a href="#硬件描述语言" class="headerlink" title="硬件描述语言"></a>硬件描述语言</h2><p>目前最为常用的硬件描述语言有两种，分别是Verilog HDL和VHDL。它们都是完备的HDL设计和验证语言，具有完整的设计方法和设计规范，它们可以设计和验证超大规模的数字集成电路，并且都已成为IEEE（电气电子工程师学会）标准。</p><p>共同特征：</p><ul><li>能形式化地抽象表示电路的行为和结构</li><li>支持逻辑设计中层次与范围的描述</li><li>可借用高级语言的精巧结构来简化电路行为的描述，具有电路仿真与验证机制，以保证设计的正确性</li><li>支持电路描述由高层到底层的综合转换</li><li>硬件描述与实现工艺无关（有关工艺可通过语言提供的属性包括进去）</li><li>易于文档管理</li><li>易于理解和设计重用</li></ul><p>区别：</p><ul><li><strong>设计方法</strong>，VHDL语法结构紧凑，灵活性差，设计规则繁琐，但由于其语法规则严谨性高，VHDL可综合性和代码一致性很强，适用于规模较大的数字集成电路系统设计；Verilog HDL的语法结构和设计方式灵活，初学者易掌握，但是设计代码风格多样性是的2代码管理和系统设计难度加大</li><li><strong>设计范围</strong>，Verilog HDL可以描述系统级（System），算法级（Algorithm），寄存器传输级（RTL），门级（Gate），开关级（Switch），而VHDL不具备开关级电路描述能力</li></ul><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ol><li><p><strong>设计输入（Design Entry）</strong>是将设计者设计的电路以开发软件要求的某种形式表达出来，并输入到相应软件中的过程。设计输入最常用的方式是<strong>原理图</strong>和<strong>HDL</strong></p></li><li><p><strong>综合（Synthesis）</strong>是一个很重要的步骤，指的是将较高级抽象层次的设计描述自动转化为较低层次描述的过程。综合在有的工具中也被称为<strong>编译（Compile）</strong>，综合有几种形式：</p><ul><li>将算法表示，行为描述转换到寄存器传输级（RTL），即从行为描述到结构描述</li><li>将RTL级描述转换到逻辑门（包括触发器），称为逻辑综合</li><li>将逻辑门表示转换到版图表示，或者转换到PLD器件的配置网表表示</li></ul></li><li><p><strong>布局布线（Place &amp; Route）</strong>，又称为适配（Fitting），可理解为将综合生成的电路逻辑网表映射到具体的目标器件当中实现，并产生最终的可下载文件的过程</p></li><li><p><strong>时序约束与时序分析（Timing Analysis）</strong>，指分析设计当中所有时序路径，计算每条时序路径的延时，检查每一条时序路径尤其是关键路径是否满足时序要求，并给出时序分析和报告结果，只要该路径的时序裕量（Slack）为正，就表示该路径能满足时序要求</p></li><li><p><strong>功能仿真和时序仿真（Simulation）</strong>，对所设计电路的功能验证，规模越大的设计，越需要仿真。</p></li></ol><ul><li>功能 &#x2F; 前仿真（Function Simulation）不考虑信号时延等因素</li><li>时序 &#x2F; 后仿真（TimingSimulation）在选择具体器件并完成布局布线后进行的包含延时的仿真，其仿真结果能比较精确的模拟未来芯片的实际性能  </li><li><img src="https://pic1.zhimg.com/v2-4b3c9220d1b4a6ca9698a7489496656a_1440w.jpg?source=172ae18b" alt="开发流程" style="zoom:80%;" /></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>Inter——Quartus</li><li>Xilinx——Vivado</li></ul>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础学习</title>
      <link href="/2022/10/09/Markdown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/09/Markdown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基础学习"><a href="#Markdown基础学习" class="headerlink" title="Markdown基础学习"></a>Markdown基础学习</h1><h2 id="初识Markdown"><a href="#初识Markdown" class="headerlink" title="初识Markdown"></a>初识Markdown</h2><p>Markdown是一种可以使用普通文本编辑器编写的轻量级标记语言，通过简单的标记语法，它可以使普通文本具有一定的格式，可以导出为PPT，Word，Pdf，HTML，JPG等多种格式的文档，其后缀为.md。</p><ol><li>专注于文字内容</li><li>纯文本，易读易写，可以方便的纳入版本控制</li><li>语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版</li></ol><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><ol><li><p>标题</p><p> 要创建标题，请在单词或者短语前面添加井号（#），（#）的数量代表了标题的级别，数字越小级别越高，总共六个级别。</p><p> 一级标题对应一个 # 号<br> 二级标题对应两个 # 号</p><p> 注意：为了兼容各Markdown软件，在#和标题之间使用一个空格</p></li><li><p>转义字符</p><p> 要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ </p></li><li><p>文本<br> 斜体（Ltalic）：在需要标注的文本前后各输入一个 * 或者一个  _<br> 粗体（Bold）：在需要标注的文本前后各输入两个 * 或者两个 _<br> 粗斜体：在需要标注的文本前后各输入三个 * 或者三个 _    </p><p> 注意：为实现兼容性，如需加粗&#x2F;斜体一个单词或者短语的中间部分以示强调，则在强调部分两端只能添加星号 *</p></li><li><p>段落</p><p>   创建段落时，使用空白行将一行或者多行文本进行分隔</p><p>   注意：不要使用空格（spaces）或者（tabs）缩进段落</p></li><li><p>列表</p><p> 有序列表：使用数字并加上一个英文句号</p><p> 无序列表：使用 * 或者 + 或者 - ，缩进一个或者多个列表项可创建嵌套列表</p></li><li><p>引用</p><p> 如需创建引用，在段落前添加一个 &gt; 符号。块引用可以包含多个段落，为段落间的空白行添加 &gt;；块引用可以嵌套，在要嵌套的段落前添加一个 &gt;&gt; 符号</p></li><li><p>围栏代码块</p><p> 在代码块之前和之后的行上使用三个反引号（&#96;&#96;&#96;）或者三个波浪线（~~~），为突出语法显示，在围栏的代码块之间的反引号&#x2F;波浪线旁边添加一种指定的语言</p></li><li><p>换行</p><p> 在一行的末尾添加两个或者多个空格，然后按回车键，即可创建一个换行 </p></li><li><p>删除线<br> 在需要删除的文字前后各使用两个 ~</p></li><li><p>表格</p><p>使用竖线 | 来分割不同的单元格，使用横线 - 来分割表头和其他行</p><p>单元格的宽度可以不同，无需在列内对齐，标题行的每一列中必须至少有一个横线</p><p>对齐方式：在标题行下（第二行）分割横线的左，右，两侧使用冒号 : 分别得到居左，居右，居中的效果</p><table><thead><tr><th align="center">LUT</th><th align="center">SLICEL</th><th align="center">SLICEM</th></tr></thead><tbody><tr><td align="center">逻辑函数发生器</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">ROM</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">分布式RAM</td><td align="center"></td><td align="center">Y</td></tr><tr><td align="center">移位寄存器</td><td align="center"></td><td align="center">Y</td></tr></tbody></table></li><li><p>分隔线</p><p> 如需创建分隔线，在单独一行上使用三个及以上（***），破折号（—），下划线（___）</p></li><li><p>图片</p><ul><li><p>插入本地图片：! [ txt ] (本地图片路径)</p></li><li><p>插入网络图片：! [ txt ] (网络图片链接)</p></li></ul></li><li><p>链接</p><blockquote><p>链接文本放在中括号内，链接地址放在后面的括号内</p><blockquote><p>这是我的github[侯同学](<a href="https://github.com/HouShiXiong">HouShiXiong (github.com)</a>)</p></blockquote></blockquote><blockquote><p>给链接添加title，当鼠标悬停在链接上会出现的文字，titlle放在圆括号中的链接地址后面，跟链接地址之间以空格分隔</p><blockquote><p>这是我的github<a href="https://github.com/HouShiXiong" title="侯同学的github">侯同学</a></p></blockquote></blockquote><blockquote><p>网址和Email地址，使用尖括号可以很方便地把URL或者email地址变成可点击的链接</p><blockquote><p>&lt;<a href="https://www.pexels.com/zh-cn/">免费素材图片 (pexels.com)</a>&gt;</p></blockquote></blockquote></li></ol><h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h2><p>按照Markdown编辑器的使用环境，可将其分为三类，关于以下编辑器的不同使用场景，大家可各取所需</p><ol><li><p>平台集成类：各大在线博客，社区平台自带的写作工具，例如Github，CSDN，博客园等</p></li><li><p>独立软件类：下载到PC上使用的独立产品，可以编辑本地文件，例如Mou，Typora等</p></li></ol><p>插件类：它自己本身不能独立使用的，可在现有的编辑器中安装，使你现有的编辑器具有Markdown的功能，例如Atom,WebStorm,Sublime Text,Markdown All In One等</p><h2 id="纸上得来终觉浅，绝知此事要躬行"><a href="#纸上得来终觉浅，绝知此事要躬行" class="headerlink" title="纸上得来终觉浅，绝知此事要躬行"></a>纸上得来终觉浅，绝知此事要躬行</h2>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
