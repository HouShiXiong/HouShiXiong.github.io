<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>纯真的童年</title>
      <link href="/2022/10/11/%E8%AF%BB%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E6%9C%89%E6%84%9F%E3%80%8B/"/>
      <url>/2022/10/11/%E8%AF%BB%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E6%9C%89%E6%84%9F%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="纯真的童年"><a href="#纯真的童年" class="headerlink" title="纯真的童年"></a>纯真的童年</h1><p>第一次读林海音老师的文字是在小学还是初中似乎已经模糊。说来忏愧，中小学的读物，竟到大学才翻出来品味，属于是当代大学生的累赘了。</p><p>小时候的英子原本与普通孩子没什么区别，只是在秀贞与妞儿离去后；在兰姨和德叔离去后；在宋妈离去后；在草丛中那个陌生人的离去后；在爸爸与自己天人永隔后，长大后的她更成熟了。</p><p>在那样一个吃人的旧社会里，虽然懵懂经历苦难的她，却依然保持一颗纯真的心。她的那句：“人太多了，我分不清海跟天，也分不清好人与坏人。” 更让我知道正是因为英子有这样的一颗心，她的童年才那么快乐又单纯，把我带进了另一个童趣的世界。那样的世界仿佛看不到旧社会的黑暗，仅仅只是一个孩子快乐、纯真的生活。</p><p>历经人间悲欢离合的英子，懂得了朋友离世的难过，懂得了失去亲人的哀伤，懂得了因为自己的不小心导致草丛里的那人，学校优秀毕业代表的哥哥的不幸后的歉疚之情……</p><p>读着读着，我仿佛身临其境：看到了东阳下戴着铃铛的骆驼队，一边走一边悠闲的嚼着草；看见了向英子招手的疯女人秀贞，她的嘴角挂着温和的笑；看见了一起玩荡秋千的妞儿，她们两个小孩开心的笑着。这些人都和英子建立了浓厚的感情，在她童年的每一刻都是重要的、快乐的、美好的并且刻骨铭心。</p><p>相比英子有趣、精彩且有些哀伤的童年生活，我们的生活则显得更单纯和无忧无虑。从小在农村长大的我不能真切的体会到北京胡同里的那份淳朴，不过英子单纯的模样却与我童年的模样有几分相似。她的故事非常淳朴、真实，更勾起我们对正在溜走的童年的依依不舍。</p><p>岁月蹉跎，儿时的玩伴已经在我的记忆里逐渐模糊，手机并不普及的年代，我们唯一的联系只有同学录上那些虚假的QQ号码和那些祝福的话。如果再次相见，我不知道自己会说出什么话语，似乎只有简单的问候：“好久不见！” “最近看了什么书？” “最近听了什么歌？” “最近过的好吗？”。</p><p>​    让实际的童年过去，让心灵的童年永存下来，《城南旧事》像是初秋的一缕微风，让我回忆起童年的点点滴滴，或酸或甜，都是独一无二的味道。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 童年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA学习（一）</title>
      <link href="/2022/10/11/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/10/11/FPGA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="初识FPGA"><a href="#初识FPGA" class="headerlink" title="初识FPGA"></a>初识FPGA</h1><h2 id="关于FPGA的一些基本概念"><a href="#关于FPGA的一些基本概念" class="headerlink" title="关于FPGA的一些基本概念"></a>关于FPGA的一些基本概念</h2><ol><li><p>市场竞争</p><p>全球 FPGA 市场由四大巨头 Xilinx（2022年被AMD收购），Altera（2015年被Intel收购），Lattice，Microsemi 垄断，同时在硬件设计和高端的EDA 软件设计上都形成了极强的技术封锁。国外企业起步较早，Xilinx、 Altera、Lattice 等公司通过近 9000 项专利构筑了牢固的知识产权壁垒，并形成了非常强大的产业生态链，四大厂商的市场占有率达到了 96%。</p></li><li><p>FPGA是什么</p><p>FPGA取自Field Programmable Gate Array 这四个英文单词的首字母，译为“现场（Field）可编程（Programmable）逻辑阵列（Gate Array）”</p><p>相对于功能较为固定的ASIC（专用集成电路）和ASSP（专用标准产品），FPGA相对自由，使用了FPGA器件的电子产品，在产品发布后仍然可以对产品设计做出修改，大大方便了产品的更新以及新的协议标准做出相应改进，从而加速产品的上市时间，并降低产品失败风险和维护成本。</p><p>举个浅显的比喻，如果说ASIC或ASSP是布满文字的印刷品，FPGA就是用铅笔自由发挥的白纸。</p><p>FPGA的内部结构：</p><ul><li>可编程输入输出单元（IOB）</li><li>可编程逻辑单元（CLB）</li><li>布线资源</li><li>嵌入式块RAM</li><li>底层嵌入功能单元（Sofa Core，区别与软IP核）</li><li>内嵌专用硬核（Hard Core，区别与硬IP核心）</li></ul></li></ol><h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><p>FPGA目前虽然还受制于较高的开发门槛以及器件本身昂贵的价格，应用的普及率上不如ARM和DSP，但是在很多的应用场合，还是必须要使用它。</p><ul><li><strong>通信领域</strong>，FPGA在通信领域的应用可以说是无所不能，得益于FPGA内部结构的特点，它可以很容易地实现分布式的算法结构，这一点对于实现无线通信中的高速数字信号处理十分有利。因为在无线通信系统中，许多功能模块通常都需要大量的滤波运算，而这些滤波函数往往需要大量的乘和累加操作，而通过FPGA来实现分布式的算术结构，就可以有效地实现这些乘和累加操作。</li><li><strong>数字信号处理</strong>,在数字信号处理领域FPGA同样所向披靡，主要是因为它的高速并行处理能力。FPGA最大优势是其并行处理机制，即利用并行架构实现数字信号处理的功能。这一并行机制使得FPGA特别适合于完成FIR等数字滤波这样重复性的数字信号处理任务，对于高速并行的数字信号处理任务来说，FPGA性能远远超过通用DSP处理器的串行执行架构，还有就是它接口的电压和驱动能力都是可编程配置的不像传统的DSP要受指令集控制。</li><li><strong>视频图像处理</strong>，人们对图像的稳定性、清晰度、亮度和颜色的追求越来越高，这使得处理芯片需要实时处理的数据量越来越大，并且图像的压缩算法也是越来越复杂。这时FPGA的优势就凸显出来了，它可以更加高效的处理数据，所以在图像处理领域在综合考虑成本后，FPGA也越来越受到市场的欢迎。</li><li><strong>高速接口</strong>，传统的做法是对应的接口使用对应的接口芯片，例如PCI接口芯片，当我需要很多接口时我就需要多个这样的接口芯片，这无疑会使我们的硬件外设变得复杂，体积变得庞大，会很不方便，但是如果使用FPGA优势立马就出来了。因为不同的接口逻辑都可以在FPGA内部去实现，完全没必要那么多的接口芯片，在配合DDR存储器的使用，将使我们接口数据的处理变得更加得心应手。</li><li><strong>人工智能</strong>，本人身微言轻，请移步<a href="%5B%E3%80%90%E8%8A%AF%E7%89%87%E5%89%8D%E6%B2%BF%E3%80%91%E8%8B%B1%E7%89%B9%E5%B0%94%E7%9A%84%E8%BF%99%E4%B8%AAAI%E8%8A%AF%E7%89%87%EF%BC%8C%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95%E8%B6%85%E8%BF%87%E8%8B%B1%E4%BC%9F%E8%BE%BE20%E5%80%8D%EF%BC%9F_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV11U4y1x7hH/?spm_id_from=333.788&vd_source=a1478b3e6a29e404615d9d5f7cb4fa30)" title="老石谈芯">中科院博士</a>对其具体的讲解和分析。</li><li><strong>IC设计</strong>，我不会，不敢乱说，自行百度。</li></ul><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="硬件描述语言"><a href="#硬件描述语言" class="headerlink" title="硬件描述语言"></a>硬件描述语言</h2><p>目前最为常用的硬件描述语言有两种，分别是Verilog HDL和VHDL。它们都是完备的HDL设计和验证语言，具有完整的设计方法和设计规范，它们可以设计和验证超大规模的数字集成电路，并且都已成为IEEE（电气电子工程师学会）标准。</p><p>共同特征：</p><ul><li>能形式化地抽象表示电路的行为和结构</li><li>支持逻辑设计中层次与范围的描述</li><li>可借用高级语言的精巧结构来简化电路行为的描述，具有电路仿真与验证机制，以保证设计的正确性</li><li>支持电路描述由高层到底层的综合转换</li><li>硬件描述与实现工艺无关（有关工艺可通过语言提供的属性包括进去）</li><li>易于文档管理</li><li>易于理解和设计重用</li></ul><p>区别：</p><ul><li><strong>设计方法</strong>，VHDL语法结构紧凑，灵活性差，设计规则繁琐，但由于其语法规则严谨性高，VHDL可综合性和代码一致性很强，适用于规模较大的数字集成电路系统设计；Verilog HDL的语法结构和设计方式灵活，初学者易掌握，但是设计代码风格多样性是的2代码管理和系统设计难度加大</li><li><strong>设计范围</strong>，Verilog HDL可以描述系统级（System），算法级（Algorithm），寄存器传输级（RTL），门级（Gate），开关级（Switch），而VHDL不具备开关级电路描述能力</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>Inter——Quartus</li><li>Xilinx——Vivado</li></ul>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础学习</title>
      <link href="/2022/10/11/Markdown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/11/Markdown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基础学习"><a href="#Markdown基础学习" class="headerlink" title="Markdown基础学习"></a>Markdown基础学习</h1><h2 id="初识Markdown"><a href="#初识Markdown" class="headerlink" title="初识Markdown"></a>初识Markdown</h2><p>Markdown是一种可以使用普通文本编辑器编写的轻量级标记语言，通过简单的标记语法，它可以使普通文本具有一定的格式，可以导出为PPT，Word，Pdf，HTML，JPG等多种格式的文档，其后缀为.md。</p><ol><li>专注于文字内容</li><li>纯文本，易读易写，可以方便的纳入版本控制</li><li>语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版</li></ol><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><ol><li><p>标题</p><p> 要创建标题，请在单词或者短语前面添加井号（#），（#）的数量代表了标题的级别，数字越小级别越高，总共六个级别。</p><p> 一级标题对应一个 # 号<br> 二级标题对应两个 # 号</p><p> 注意：为了兼容各Markdown软件，在#和标题之间使用一个空格</p></li><li><p>文本<br> 斜体（Ltalic）：在需要标注的文本前后各输入一个 * 或者一个  _<br> 粗体（Bold）：在需要标注的文本前后各输入两个 * 或者两个 _<br> 粗斜体：在需要标注的文本前后各输入三个 * 或者三个 _    </p><p> 注意：为实现兼容性，如需加粗&#x2F;斜体一个单词或者短语的中间部分以示强调，则在强调部分两端只能添加星号 *</p></li><li><p>段落</p><p>   创建段落时，使用空白行将一行或者多行文本进行分隔</p><p>   注意：不要使用空格（spaces）或者（tabs）缩进段落</p></li><li><p>列表</p><p> 有序列表：使用数字并加上一个英文句号</p><p> 无序列表：使用 * 或者 + 或者 - ，缩进一个或者多个列表项可创建嵌套列表</p></li><li><p>引用</p><p> 如需创建引用，在段落前添加一个 &gt; 符号。块引用可以包含多个段落，为段落间的空白行添加 &gt;；块引用可以嵌套，在要嵌套的段落前添加一个 &gt;&gt; 符号</p></li><li><p>围栏代码块</p><p> 在代码块之前和之后的行上使用三个反引号（&#96;&#96;&#96;）或者三个波浪线（~~~），为突出语法显示，在围栏的代码块之间的反引号&#x2F;波浪线旁边添加一种指定的语言</p></li><li><p>换行</p><p> 在一行的末尾添加两个或者多个空格，然后按回车键，即可创建一个换行 </p></li><li><p>删除线<br> 在需要删除的文字前后各使用两个 ~</p></li><li><p>表格</p><p> 使用竖线 | 来分割不同的单元格，使用横线 - 来分割表头和其他行</p><p> 单元格的宽度可以不同，无需在列内对齐，标题行的每一列中必须至少有一个横线</p><p> 对齐方式：在标题行下（第二行）分割横线的左，右，两侧使用冒号 : 分别得到居左，居右，居中的效果</p><table><thead><tr><th align="center">LUT</th><th align="center">SLICEL</th><th align="center">SLICEM</th></tr></thead><tbody><tr><td align="center">逻辑函数发生器</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">ROM</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">分布式RAM</td><td align="center"></td><td align="center">Y</td></tr><tr><td align="center">移位寄存器</td><td align="center"></td><td align="center">Y</td></tr></tbody></table></li><li><p>分隔线</p><p>如需创建分隔线，在单独一行上使用三个及以上（***），破折号（—），下划线（___）</p></li><li><p>链接</p><blockquote><p>链接文本放在中括号内，链接地址放在后面的括号内</p><blockquote><p>这是我的github[侯同学](<a href="https://github.com/HouShiXiong">HouShiXiong (github.com)</a>)</p></blockquote></blockquote><blockquote><p>给链接添加title，当鼠标悬停在链接上会出现的文字，titlle放在圆括号中的链接地址后面，跟链接地址之间以空格分隔</p><blockquote><p>这是我的github<a href="https://github.com/HouShiXiong" title="侯同学的github">侯同学</a></p></blockquote></blockquote><blockquote><p>网址和Email地址，使用尖括号可以很方便地把URL或者email地址变成可点击的链接</p><blockquote><p>&lt;<a href="https://www.pexels.com/zh-cn/">免费素材图片 (pexels.com)</a>&gt;</p></blockquote></blockquote></li></ol><h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h2><p>按照Markdown编辑器的使用环境，可将其分为三类，关于以下编辑器的不同使用场景，大家可各取所需</p><ol><li><p>平台集成类：各大在线博客，社区平台自带的写作工具，例如Github，CSDN，博客园等</p></li><li><p>独立软件类：下载到PC上使用的独立产品，可以编辑本地文件，例如Mou，Typora等</p></li></ol><p>插件类：它自己本身不能独立使用的，可在现有的编辑器中安装，使你现有的编辑器具有Markdown的功能，例如Atom,WebStorm,Sublime Text,Markdown All In One等</p><h2 id="纸上得来终觉浅，绝知此事要躬行"><a href="#纸上得来终觉浅，绝知此事要躬行" class="headerlink" title="纸上得来终觉浅，绝知此事要躬行"></a>纸上得来终觉浅，绝知此事要躬行</h2>]]></content>
      
      
      <categories>
          
          <category> 我们都有光明的未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
